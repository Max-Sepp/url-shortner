// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new shortened url
	// (POST /api/shorten)
	ShortenUrl(ctx echo.Context) error
	// Get shortened URL
	// (GET /s/{code})
	GetShortenUrl(ctx echo.Context, code string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ShortenUrl converts echo context to params.
func (w *ServerInterfaceWrapper) ShortenUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShortenUrl(ctx)
	return err
}

// GetShortenUrl converts echo context to params.
func (w *ServerInterfaceWrapper) GetShortenUrl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetShortenUrl(ctx, code)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/shorten", wrapper.ShortenUrl)
	router.GET(baseURL+"/s/:code", wrapper.GetShortenUrl)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xU3W7bOgx+FYHnXDqx2/ScDb5be9EVKLAhbYphQzCoNmOrsCWNopsGgd99oJy0+ekw",
	"DN1VHImkvh+Sayhc651FywHyNYSixlbHz5vaEaO9cCXKX0/OI7HBeFlsTksMBRnPxlnI4bZGJTeKa82q",
	"0Fbdo+oCloqdqpCVVoSlISxYTrhG5chUxupGeV0hJIBPuvUNQg53Jzd8+WX6/vvX/x7Kj+b/81G7uoUE",
	"eOXlOjAZW0HfJ0D4ozOEJeTfBmDz5yh3/4AFQ5/AbHp9TKOj5nUWHTVq5Tq1NKEWqPeowqAHlnsoa2Yf",
	"8jStnKsaHBeu/S1EefQYoUQZu3CChw3H4rPptYo2WCQ1Up882g+fr9RknEECj0hhAHwyzsaZcHQerfYG",
	"cpiMs/EEEvCa68g01d6kGwpRBxdYfkUNLcSvSsi3ns+ogQEzBj535Wqw3DLamKS9b0wR09KH4OxL58jX",
	"v4QLyOGf9KW10k1fpeKCMN2t8DRaLpejhaN21FGDViws31iybf60wJ5JTB3Gg+CdDUOvnGbZX5Nhd7be",
	"hH2/UJ8ctPJNVxQYwqJr1LPR0ihnA5f94Cv7qBtTKmN9F0fm7PT0OOpOYmIhhU8FDsfycujaVtMKcrgg",
	"1IxKK4vLl7GRmZLZ0FWQKdggV6L+XPLTkK7F+l7erPCV7rxE3mtQr0m3yEhS8BCnSKIWjo4AGLmVuYAE",
	"rG5lzuLSOPQ/2bHgcKDnB70xyd4dKzXdrLogK5C2C09ARAfOjjNm1CjrWC1cZ8sDUS+Rd6iIar/UUvKQ",
	"Hre6xCUXF1Wepo0rdFO7wPkkyzIQJpsq660au9X6ef8zAAD//3FNwDwjBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
